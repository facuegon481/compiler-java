package lyc.compiler;

import java_cup.runtime.*;

class Parser;

// Terminals
terminal ID;
terminal ASIGNACION;
terminal OP_SUMA;
terminal OP_REST;
terminal OP_MULT;
terminal OP_DIV;
terminal CONST_ENTERA;
terminal CONST_REAL;

terminal LETRA;
terminal INIT;
terminal PUNTO;
terminal INTEGER;
terminal FLOAT;
terminal STRING;
terminal IGUAL_IGUAL;
terminal PUNTO_COMA;
terminal PRINTF;
terminal SCANF;
terminal GETPENULTIMATEPOSITION;
terminal SUMALOSULTIMOS;
terminal AND;
terminal OR;
terminal NOT;
terminal SALTO_LINEA;
terminal CARACTER_NO_SALTO;
terminal COMENTARIO_EN_LINEA;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal COMA;
terminal DISTINTO;
terminal MENOR_IGUAL;
terminal MAYOR_IGUAL;
terminal COR_A;
terminal COR_C;
terminal MENOR;
terminal MAYOR;
terminal LLAVE_A;
terminal LLAVE_C;
terminal PAREN_A;
terminal PAREN_C;
terminal TEXTO;

// Non Terminals


non terminal inicio;
non terminal programa;
non terminal sentencia;
non terminal asignacion;
non terminal expresion;
non terminal termino;
non terminal factor;
non terminal seleccion;
non terminal ifheader;
non terminal condicion;
non terminal comparacion;
non terminal comparador;

start with inicio;

inicio ::= programa {: System.out.println("Regla 1:   inicio <- programa"); :};

programa ::= programa sentencia {: System.out.println("Regla 2:   programa <- programa sentencia"); :};
programa ::= sentencia {: System.out.println("Regla 3:   programa <- sentencia"); :};

sentencia ::= asignacion {: System.out.println("Regla 4:  sentencia <- asignacion"); :};
sentencia ::= seleccion {: System.out.println("Regla 5:  sentencia <- seleccion"); :};

ifheader ::= IF PAREN_A condicion PAREN_C {: System.out.println("Regla 6:  ifheader"); :};

seleccion ::= ifheader LLAVE_A programa LLAVE_C {: System.out.println("7:  seleccion <- ifheader LLAVE_A programa LLAVE_C"); :};
seleccion ::= ifheader LLAVE_A programa LLAVE_C ELSE LLAVE_A programa LLAVE_C {: System.out.println("Regla 8:  seleccion <- ifheader LLAVE_A programa LLAVE_C ELSE LLAVE_A programa LLAVE_C"); :};

condicion ::= comparacion OR comparacion {: System.out.println("Regla 9:  condicion <- comparacion or comparacion"); :};
condicion ::= comparacion AND comparacion {: System.out.println("Regla 10:  condicion <- comparacion and comparacion"); :};
condicion ::= comparacion {: System.out.println("Regla 11:  condicion <- comparacion"); :};

comparacion ::= expresion comparador expresion {: System.out.println("Regla 11:  comparacion <- expresion comparador expresion"); :};

comparador  ::= 	IGUAL_IGUAL:comp {: System.out.println("Regla 12:  comparador <- =="); :};
comparador  ::= 	DISTINTO:comp {: System.out.println("Regla 13:  comparador <- disntito"); :};
comparador  ::= 	MAYOR_IGUAL:comp {: System.out.println("Regla 14:  comparador <- mayor igual"); :};
comparador  ::= 	MENOR_IGUAL:comp {: System.out.println("Regla 15:  comparador <- menor igual"); :};
comparador  ::= 	MAYOR:comp {: System.out.println("Regla 16:  comparador <- mayor"); :};
comparador  ::= 	MENOR:comp {: System.out.println("Regla 17:  comparador <- menor"); :};

asignacion ::= ID:_id  ASIGNACION expresion {: System.out.println("Regla 18:  asignacion <- ID ASIGNACION expresion"); :};

expresion ::= expresion OP_SUMA termino {: System.out.println("Regla 19:  expresion <- expresion OP_SUMA termino"); :};
expresion ::= expresion OP_REST termino {: System.out.println("Regla 20:  expresion <- expresion OP_REST termino"); :};
expresion ::= termino {: System.out.println("Regla 21:  expresion <- termino"); :};

termino ::= termino OP_MULT factor {: System.out.println("Regla 22:  termino <- termino OP_MULT factor"); :};
termino ::= termino OP_DIV factor {: System.out.println("Regla 23:  termino <- termino OP_DIV factor"); :};
termino ::= factor {: System.out.println("Regla 24:  termino <- factor"); :};

factor ::= ID:_id {: System.out.println("Regla 25:  ID" + _id.toString()); :};
factor ::= CONST_ENTERA {: System.out.println("Regla 26:  CTE ENTERA"); :};
factor ::= CONST_REAL {: System.out.println("Regla 27:  CONST_REAL"); :};
factor ::= TEXTO {: System.out.println("Regla 28: TEXTO"); :};
factor ::= PAREN_A expresion PAREN_C {: System.out.println("Regla 29:  PAREN_A expresion PAREN_C"); :};